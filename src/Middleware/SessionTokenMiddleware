<?php
declare(strict_types=1);

namespace App\Middleware;

use PDO;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response as Psr7Response;
//E facut in caz ca se schimba modul in care se face token pentru login
class SessionTokenMiddleware {
    private PDO $db;

    public function __construct(PDO $db) {
        $this->db = $db;
    }

    public function __invoke(Request $request, RequestHandler $handler): Response {
        // Extract session token from request
        $sessionToken = $_SESSION['sessionToken'] ?? '';

        // Validate session token
        if ($this->isValidSessionToken($sessionToken)) {
            // Attach user ID to request object
            $request = $request->withAttribute('userId', $_SESSION['userId']);
            return $handler->handle($request);
        } else {
            // Unauthorized
            $response = new Psr7Response();
            $response->getBody()->write(json_encode(['error' => 'Unauthorized']));
            return $response->withStatus(401);
        }
    }

    private function isValidSessionToken(string $sessionToken): bool {
        // Check if session token exists and is valid (e.g., not expired)
        return !empty($sessionToken); // You can add additional validation logic if needed
    }
}
